@page "/chores/create"
@inject IDbContextFactory<Teaghlach.Data.TeaghlachContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Chore</h2>
<hr />
<div class="row">
	<div class="col-md-4">
		<!-- Using EditForm for form validation and submission -->
		<EditForm method="post" Model="Chore" OnValidSubmit="AddChore" FormName="create" Enhance>
			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />

			<!-- Chore type dropdown - using enum values and descriptions -->
			<div class="mb-3">
				<label for="choreType" class="form-label">Chore Type:</label>
				<InputSelect id="choreType" class="form-select" @bind-Value="Chore.Type">
					<option value="">-- Select Chore Type --</option>
					@foreach (var type in Enum.GetValues<ChoreType>())
					{
						<option value="@type">@type.GetDescription()</option>
					}
				</InputSelect>
				<ValidationMessage For="() => Chore.Type" class="text-danger" />
			</div>

			<!-- Assign to a family member from the list loaded on init -->
			<div class="mb-3">
				<label for="assignedToId" class="form-label">Family Member:</label>
				<InputSelect id="assignedToId" @bind-Value="Chore.AssignedToId" class="form-select">
					<option value="">-- Select Family Member --</option>
					@foreach (var member in FamilyMembers)
					{
						<option value="@member.Id">@member.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => Chore.AssignedToId" class="text-danger" />
			</div>

			<!-- Optional: capture when the chore was created -->
			<div class="mb-3">
				<label for="createdat" class="form-label">Created Date:</label>
				<InputDate id="createdat" @bind-Value="Chore.CreatedAt" class="form-control" />
			</div>

			<!-- Required: when the chore is due -->
			<div class="mb-3">
				<label for="duedate" class="form-label">Due Date:</label>
				<InputDate id="duedate" @bind-Value="Chore.DueDate" class="form-control" aria-required="true" />
				<ValidationMessage For="() => Chore.DueDate" class="text-danger" />
			</div>

			<!-- Checkbox to indicate if chore is done – disabled at creation -->
			<div class="mb-3">
				<label for="iscompleted" class="form-label">Completed:</label>
				<InputCheckbox id="iscompleted" @bind-Value="Chore.IsCompleted" class="form-check-input" disabled />
				<ValidationMessage For="() => Chore.IsCompleted" class="text-danger" />
			</div>

			<!-- Submit button -->
			<button type="submit" class="btn btn-primary">Create</button>
		</EditForm>
	</div>
</div>

<!-- Basic navigation back to the list -->
<div>
	<a href="/chores">Back to List</a>
</div>

@code {
	// This holds the new chore details coming from the form
	[SupplyParameterFromForm]
	private Chore Chore { get; set; } = new();

	// Family members loaded from the DB so user can assign chores
	private List<FamilyMember> FamilyMembers = new();

	// Load family members on init and set default dates if needed
	protected override async Task OnInitializedAsync()
	{
		using var context = await DbFactory.CreateDbContextAsync();
		FamilyMembers = await context.FamilyMembers.ToListAsync();

		// Set default due date and created date if not already populated
		if (Chore.DueDate == default)
			Chore.DueDate = DateTime.Today;

		if (Chore.CreatedAt == default)
			Chore.CreatedAt = DateTime.Today;
	}

	// Called when the form is valid – save chore and navigate back
	private async Task AddChore()
	{
		using var context = DbFactory.CreateDbContext();
		context.Chores.Add(Chore);
		await context.SaveChangesAsync();
		NavigationManager.NavigateTo("/chores");
	}
}
