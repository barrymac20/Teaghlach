@page "/familymembers/delete"
@inject IDbContextFactory<Teaghlach.Data.TeaghlachContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>FamilyMember</h2>
    <hr />
    @if (familymember is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@familymember.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Family Role</dt>
            <dd class="col-sm-10">@familymember.FamilyRole?.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Sub Role</dt>
            <dd class="col-sm-10">@familymember.FamilySubRole?.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Date Of Birth</dt>
            <dd class="col-sm-10">@familymember.DateOfBirth?.ToString("dd/MM/yyyy")</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Email Address</dt>
            <dd class="col-sm-10">@familymember.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Phone Number</dt>
            <dd class="col-sm-10">@familymember.PhoneNumber</dd>
        </dl>
        <EditForm method="post" Model="familymember" OnValidSubmit="DeleteFamilyMember" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(familymember is null)">Delete</button> |
            <a href="/familymembers">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private FamilyMember? familymember;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        familymember = await context.FamilyMembers
    .Include(m => m.FamilyRole)
    .Include(m => m.FamilySubRole)
    .FirstOrDefaultAsync(m => m.Id == Id);

        if (familymember is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteFamilyMember()
    {
        using var context = DbFactory.CreateDbContext();
        context.FamilyMembers.Remove(familymember!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/familymembers");
    }
}
