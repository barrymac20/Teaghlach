@* FOR FUTURE *@


@* @page "/login" *@
@* @using System.ComponentModel.DataAnnotations *@
@* @using Microsoft.EntityFrameworkCore *@
@* @using Teaghlach.Data *@
@* @using Teaghlach.Models *@
@* @using static BCrypt.Net.BCrypt *@
@* @inject IDbContextFactory<TeaghlachContext> DbFactory *@
@* @inject NavigationManager Navigation *@

@* <h3>Login</h3> *@

@* @if (!string.IsNullOrEmpty(ErrorMessage)) *@
@* { *@
@*     <div class="alert alert-danger">@ErrorMessage</div> *@
@* } *@

@* <EditForm Model="@loginModel" OnValidSubmit="HandleLogin"> *@
@*     <DataAnnotationsValidator /> *@
@*     <ValidationSummary /> *@

@*     <div class="mb-3"> *@
@*         <label>Username</label> *@
@*         <InputText @bind-Value="loginModel.Username" class="form-control" /> *@
@*     </div> *@

@*     <div class="mb-3"> *@
@*         <label>Password</label> *@
@*         <InputText @bind-Value="loginModel.Password" type="password" class="form-control" /> *@
@*     </div> *@

@*     <button type="submit" class="btn btn-primary">Login</button> *@
@* </EditForm> *@

@* @code { *@
@*     private LoginModel loginModel = new(); *@
@*     private string ErrorMessage = string.Empty; *@

@*     private async Task HandleLogin() *@
@*     { *@
@*         await using var db = await DbFactory.CreateDbContextAsync(); *@

@*         var user = await db.FamilyMembers *@
@*             .FirstOrDefaultAsync(f => f.Username == loginModel.Username); *@

@*         if (user == null || !Verify(loginModel.Password, user.PasswordHash)) *@
@*         { *@
@*             ErrorMessage = "Invalid username or password."; *@
@*             return; *@
@*         } *@

        
@*         Navigation.NavigateTo("/home"); *@
@*     } *@

@*     public class LoginModel *@
@*     { *@
@*         [Required] *@
@*         public string Username { get; set; } = string.Empty; *@

@*         [Required] *@
@*         public string Password { get; set; } = string.Empty; *@
@*     } *@
@* } *@
