@inherits LayoutComponentBase
@using MudBlazor

<MudPopoverProvider />
<MudThemeProvider />
<MudLayout>

	<!-- Top App Bar -->

	<MudAppBar Elevation="1" Color="Color.Default">
		<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />
		<MudText Typo="Typo.h5" Class="ml-3" Color="Color.Inherit" Href="/" Style="text-decoration: none;">
			Teaghlach
		</MudText>
		<MudSpacer />
		<MudText Class="pr-4">🕒 @CurrentTime @CurrentWeather</MudText> <!-- Placeholder -->
	</MudAppBar>

	<!-- Left Nav Drawer -->

	<MudDrawer @bind-Open="DrawerOpen" ClipMode="DrawerClipMode.Always" Elevation="2" Variant="@DrawerVariant.Mini" OpenMiniOnHover="true">
		<MudNavMenu>

			<!-- Top Menu Items -->
			<MudNavLink Href="/" Match="NavLinkMatch.All" Icon="@Icons.Material.Filled.Dashboard" ActiveClass="active-link" Class="nav-link">Dashboard</MudNavLink>
			<MudNavLink Href="/calendar" Icon="@Icons.Material.Filled.CalendarMonth" ActiveClass="active-link" Class="nav-link">Calendar</MudNavLink>
			<MudNavLink Href="/chores" Icon="@Icons.Material.Filled.Checklist" ActiveClass="active-link" Class="nav-link">Chores</MudNavLink>
			<MudNavLink Href="/rewards" Icon="@Icons.Material.Filled.Star" ActiveClass="active-link" Class="nav-link">Rewards</MudNavLink>
			<MudNavLink Href="/meals" Icon="@Icons.Material.Filled.Restaurant" ActiveClass="active-link" Class="nav-link">Meals</MudNavLink>
			<MudNavLink Href="/lists" Icon="@Icons.Material.Filled.List" ActiveClass="active-link" Class="nav-link">Lists</MudNavLink>
			<MudNavLink Href="/familymembers" Icon="@Icons.Material.Filled.FamilyRestroom" ActiveClass="active-link" Class="nav-link">My Family</MudNavLink> 

			<MudSpacer />

			<!-- Bottom Settings Option -->
			<MudNavLink Href="/settings" Icon="@Icons.Material.Filled.Settings" ActiveClass="active-link" Class="mud-mt-auto nav-link">Settings</MudNavLink>
		</MudNavMenu>
	</MudDrawer>

	<!-- Main Content Area -->
	<MudMainContent Class="pt-16" Style="background-color: #fafafa;">
		@Body
	</MudMainContent>

</MudLayout>

<style>

</style>

@code {
    private bool DrawerOpen = true;
    private string CurrentTime = string.Empty;
    private string CurrentWeather = "Loading...";
    private Timer? Timer;

    [Inject] private IJSRuntime JS { get; set; } = default!;

    void DrawerToggle()
    {
        DrawerOpen = !DrawerOpen;
    }

    protected override void OnInitialized()
    {
        
		Timer = new Timer(UpdateTime, null, TimeSpan.Zero, TimeSpan.FromMinutes(1));
    }
	private void UpdateTime(object? state)
	{
		CurrentTime = DateTime.Now.ToString("HH:mm");
		InvokeAsync(StateHasChanged);
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			try
			{
				CurrentWeather = await JS.InvokeAsync<string>("getWeather");
				StateHasChanged();
			}
			catch (Exception ex)
			{
				CurrentWeather = "⚠️ Weather unavailable";
				Console.Error.WriteLine($"Weather fetch failed: {ex.Message}");
			}
		}
	}

    public void Dispose()
    {
        Timer?.Dispose();
    }
}
