@page "/chores"
@implements IAsyncDisposable
@inject IDbContextFactory<Teaghlach.Data.TeaghlachContext> DbFactory
@using QuickGridSortDirection = Microsoft.AspNetCore.Components.QuickGrid.SortDirection


<PageTitle>Chores</PageTitle>

<h1>Chores List</h1>

<p>
    <a href="chores/create">Create New</a>
</p>

<QuickGrid Class="table" Items="context.Chores">

    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn TGridItem="Chore" TProp="string" Property="chore => chore.Type.GetDescription()" Title="Chore" Sortable="true" />
    <Microsoft.AspNetCore.Components.QuickGrid.PropertyColumn TGridItem="Chore" TProp="string" Property="chore => chore.AssignedTo.Name" Title="Assigned To" Sortable="true" />

    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn TGridItem="Chore" Title="Created Date" Context="chore">
        @chore.CreatedAt.ToString("dd/MM/yyyy")
    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>

    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn TGridItem="Chore" Title="Due Date" Context="chore">
        @chore.DueDate.ToString("dd/MM/yyyy")
    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>

    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn TGridItem="Chore" Title="Completed" Context="chore">
        @(chore.IsCompleted ? "Yes" : "No")
    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>

    <Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn Context="chore">
        <a href="@($"chores/edit?id={chore.Id}")">Edit</a> |
        <a href="@($"chores/details?id={chore.Id}")">Details</a> |
        <a href="@($"chores/delete?id={chore.Id}")">Delete</a>
    </Microsoft.AspNetCore.Components.QuickGrid.TemplateColumn>
</QuickGrid>

@code {
    private TeaghlachContext context = default!;
    private string? choreTypeFilter;
    private string? assignedToFilter;
    private QuickGrid<Chore>? grid;

    protected override async Task OnInitializedAsync()
    {
        context = DbFactory.CreateDbContext();

        context.Chores
        .Include(f => f.AssignedTo)
        .Load();
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync(); 

}
