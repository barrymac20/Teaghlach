<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <base href="/" />
    <link rel="stylesheet" href="@Assets["app.css"]" />
    <link rel="stylesheet" href="@Assets["Teaghlach.styles.css"]" />
    <link href="https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap" rel="stylesheet" />
    <link href="_content/MudBlazor/MudBlazor.min.css" rel="stylesheet" />
    <link href="_content/Heron.MudCalendar/Heron.MudCalendar.min.css" rel="stylesheet" />
    <ImportMap />
    <HeadOutlet @rendermode="PageRenderMode" />
</head>

<body>
    <Routes @rendermode="PageRenderMode" />
    <script src="_framework/blazor.web.js"></script>
    <script src="_content/MudBlazor/MudBlazor.min.js"></script>
    <script type="module" src="_content/Heron.MudCalendar/Heron.MudCalendar.min.js"></script>
    <script>
        window.getWeather = async function () {
            return new Promise((resolve, reject) => {
                if (!navigator.geolocation) {
                    reject("Geolocation not supported");
                    return;
                }

                navigator.geolocation.getCurrentPosition(async (position) => {
                    const lat = position.coords.latitude;
                    const lon = position.coords.longitude;

                    const weatherUrl = `https://api.open-meteo.com/v1/forecast?latitude=${lat}&longitude=${lon}&current=temperature_2m,weathercode&timezone=auto`;
                    const locationUrl = `https://nominatim.openstreetmap.org/reverse?format=json&lat=${lat}&lon=${lon}`;

                    try {
                        const [weatherResponse, locationResponse] = await Promise.all([
                            fetch(weatherUrl),
                            fetch(locationUrl, {
                                headers: { 'User-Agent': 'TeaghlachApp/1.0' }
                            })
                        ]);

                        const weatherData = await weatherResponse.json();
                        const locationData = await locationResponse.json();

                        const temperature = weatherData.current.temperature_2m;
                        const code = weatherData.current.weathercode;

                        const city = locationData.address.town || locationData.address.city || locationData.address.village || locationData.address.county || "your area";


                        const weatherMap = {
                            0: "☀️ Clear sky",
                            1: "🌤️ Mainly clear",
                            2: "⛅ Partly cloudy",
                            3: "☁️ Overcast",
                            45: "🌫️ Fog",
                            48: "🌫️ Depositing fog",
                            51: "🌦️ Light drizzle",
                            53: "🌦️ Moderate drizzle",
                            55: "🌦️ Dense drizzle",
                            56: "🌧️ Light freezing drizzle",
                            57: "🌧️ Dense freezing drizzle",
                            61: "🌧️ Slight rain",
                            63: "🌧️ Moderate rain",
                            65: "🌧️ Heavy rain",
                            66: "🌧️ Light freezing rain",
                            67: "🌧️ Heavy freezing rain",
                            71: "🌨️ Slight snow",
                            73: "🌨️ Moderate snow",
                            75: "🌨️ Heavy snow",
                            77: "🌨️ Snow grains",
                            80: "🌦️ Slight rain showers",
                            81: "🌧️ Moderate rain showers",
                            82: "⛈️ Violent rain showers",
                            85: "🌨️ Slight snow showers",
                            86: "🌨️ Heavy snow showers",
                            95: "⛈️ Thunderstorm",
                            96: "⛈️ Thunderstorm w/ slight hail",
                            99: "⛈️ Thunderstorm w/ heavy hail"
                        };

                        const description = weatherMap[code] || "🌈 Unknown";

                        resolve(`📍 ${city} | ${description} | 🌡️ ${temperature}°C`);
                    } catch (err) {
                        reject("Weather or location fetch error");
                    }
                }, () => {
                    reject("Location permission denied");
                });
            });
        }
    </script>


</body>

</html>

@code {
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;

    private IComponentRenderMode? PageRenderMode =>
        HttpContext.AcceptsInteractiveRouting() ? InteractiveServer : null;
}
