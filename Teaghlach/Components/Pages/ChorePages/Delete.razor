@page "/chores/delete"
@inject IDbContextFactory<Teaghlach.Data.TeaghlachContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Chore</h2>
    <hr />
    @if (Chore is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <table class="table table-bordered w-auto">
            <tbody>
                <tr>
                    <td class="fw-bold text-start"><strong>Chore</strong></td>
                    <td class="text-start ps-4">@Chore.Type.GetDescription()</td>
                </tr>

                <tr>
                    <td class="fw-bold text-start"><strong>Assigned To</strong></td>
                    <td class="text-start ps-4">@Chore.AssignedTo?.Name</td>
                </tr>
                
                <tr>
                    <td class="fw-bold text-start"><strong>Created</strong></td>
                    <td class="text-start ps-4">@Chore.CreatedAt.ToShortDateString()</td>
                </tr>
                <tr>
                    <td class="fw-bold text-start"><strong>Due Date</strong></td>
                    <td class="text-start ps-4">@Chore.DueDate.ToShortDateString()</td>
                </tr>
                <tr>
                    <td class="fw-bold text-start"><strong>Completed</strong></td>
                    <td class="text-start ps-4">@(Chore.IsCompleted ? "Yes" : "No")</td>
                </tr>
            </tbody>
        </table>

        <EditForm method="post" Model="Chore" OnValidSubmit="DeleteChore" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(Chore is null)">Delete</button> |
            <a href="/chores">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Chore? Chore;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Chore = await context.Chores
            .Include(c => c.AssignedTo)
            .FirstOrDefaultAsync(c => c.Id == Id);

        if (Chore is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteChore()
    {
        using var context = DbFactory.CreateDbContext();
        context.Chores.Remove(Chore!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/chores");
    }
}
