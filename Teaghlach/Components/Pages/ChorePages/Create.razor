@page "/chores/create"
@using Microsoft.EntityFrameworkCore
@using Teaghlach.Data
@inject IDbContextFactory<Teaghlach.Data.TeaghlachContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>Chore</h2>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Chore" OnValidSubmit="AddChore" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" role="alert"/>
            <div class="mb-3">
                <label for="choreType" class="form-label">Chore Type:</label>
                <InputSelect id="choreType" class="form-select" @bind-Value="Chore.Type">
                    <option value="">-- Select Choe Type --</option>
                    @foreach (var type in Enum.GetValues<ChoreType>())
                    {
                        <option value="@type">@type.GetDescription()</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Chore.Type" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="assignedToId" class="form-label">Family Member:</label>
                <InputSelect id="assignedToId" @bind-Value="Chore.AssignedToId" class="form-select">
                    <option value="">-- Select Family Member --</option>
                    @foreach (var member in FamilyMembers)
                    {
                        <option value="@member.Id">@member.Name</option>
                    }
                </InputSelect>
                <ValidationMessage For="() => Chore.AssignedToId" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="createdat" class="form-label">Created Date:</label>
                <InputDate id="createdat" @bind-Value="Chore.CreatedAt" class="form-control" />
                <ValidationMessage For="() => Chore.CreatedAt" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="duedate" class="form-label">Due Date:</label>
                <InputDate id="duedate" @bind-Value="Chore.DueDate" class="form-control" aria-required="true" />
                <ValidationMessage For="() => Chore.DueDate" class="text-danger" />
            </div>
            <div class="mb-3">
                <label for="iscompleted" class="form-label">Completed:</label>
                <InputCheckbox id="iscompleted" @bind-Value="Chore.IsCompleted" class="form-check-input" disabled />
                <ValidationMessage For="() => Chore.IsCompleted" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/chores">Back to List</a>
</div>

@code {
    [SupplyParameterFromForm]
    private Chore Chore { get; set; } = new();
    private List<FamilyMember> FamilyMembers = new();


    protected override async Task OnInitializedAsync()
    {
        using var context = await DbFactory.CreateDbContextAsync();
        FamilyMembers = await context.FamilyMembers.ToListAsync();

        if (Chore.DueDate == default)
            Chore.DueDate = DateTime.Today;

        if (Chore.CreatedAt == default)
            Chore.CreatedAt = DateTime.Today;
    }

    private async Task AddChore()
    {
        using var context = DbFactory.CreateDbContext();
        context.Chores.Add(Chore);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/chores");
    }
}
