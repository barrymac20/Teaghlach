@* @page "/familyevents/details" *@
@* @using Microsoft.EntityFrameworkCore *@
@* @using Teaghlach.Models *@
@* @inject IDbContextFactory<Teaghlach.Data.TeaghlachContext> DbFactory *@
@* @inject NavigationManager NavigationManager *@

@* <PageTitle>Details</PageTitle> *@

@* <h1>Details</h1> *@

@* <div> *@
@*     <h2>FamilyEvent</h2> *@
@*     <hr /> *@
@*     @if (familyevent is null) *@
@*     { *@
@*         <p><em>Loading...</em></p> *@
@*     } *@
@*     else { *@
@*         <dl class="row"> *@
@*             <dt class="col-sm-2">Title</dt> *@
@*             <dd class="col-sm-10">@familyevent.Title</dd> *@
@*             <dt class="col-sm-2">Location</dt> *@
@*             <dd class="col-sm-10">@familyevent.Location</dd> *@
@*             <dt class="col-sm-2">Description</dt> *@
@*             <dd class="col-sm-10">@familyevent.Description</dd> *@
@*             <dt class="col-sm-2">Category</dt> *@
@*             <dd class="col-sm-10">@familyevent.Category</dd> *@
@*             <dt class="col-sm-2">Color</dt> *@
@*             <dd class="col-sm-10">@familyevent.Color</dd> *@
@*             <dt class="col-sm-2">FamilyMemberId</dt> *@
@*             <dd class="col-sm-10">@familyevent.FamilyMemberId</dd> *@
@*             <dt class="col-sm-2">Start</dt> *@
@*             <dd class="col-sm-10">@familyevent.Start</dd> *@
@*             <dt class="col-sm-2">End</dt> *@
@*             <dd class="col-sm-10">@familyevent.End</dd> *@
@*             <dt class="col-sm-2">AllDay</dt> *@
@*             <dd class="col-sm-10">@familyevent.AllDay</dd> *@
@*             <dt class="col-sm-2">Text</dt> *@
@*             <dd class="col-sm-10">@familyevent.Text</dd> *@
@*         </dl> *@
@*         <div> *@
@*             <a href="@($"/familyevents/edit?id={familyevent.Id}")">Edit</a> | *@
@*             <a href="@($"/familyevents")">Back to List</a> *@
@*         </div> *@
@*     } *@
@* </div> *@

@* @code { *@
@*     private FamilyEvent? familyevent; *@

@*     [SupplyParameterFromQuery] *@
@*     private int Id { get; set; } *@

@*     protected override async Task OnInitializedAsync() *@
@*     { *@
@*         using var context = DbFactory.CreateDbContext(); *@
@*         familyevent = await context.FamilyEvents.FirstOrDefaultAsync(m => m.Id == Id); *@

@*         if (familyevent is null) *@
@*         { *@
@*             NavigationManager.NavigateTo("notfound"); *@
@*         } *@
@*     } *@
@* } *@

@page "/familyevents/details"
@using Microsoft.EntityFrameworkCore
@using Teaghlach.Models
@inject IDbContextFactory<Teaghlach.Data.TeaghlachContext> DbFactory
@inject NavigationManager NavigationManager

@using MudBlazor

<PageTitle>Event Details</PageTitle>

<MudPaper Class="mx-auto my-6 p-6" MaxWidth="600px" Elevation="3">
    <MudText Typo="Typo.h5" GutterBottom="true">📅 Event Details</MudText>
    <MudDivider Class="my-2" />

    @if (familyevent is null)
    {
        <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
    }
    else
    {
    <MudList Dense="true" T="CalendarItem">
            <MudListItem><b>Title:</b> @familyevent.Title</MudListItem>
            <MudListItem><b>Location:</b> @familyevent.Location</MudListItem>
            <MudListItem><b>Description:</b> @familyevent.Description</MudListItem>
            <MudListItem><b>Category:</b> @familyevent.Category</MudListItem>
            <MudListItem><b>Color:</b> @familyevent.Color</MudListItem>
            <MudListItem><b>Family Member ID:</b> @familyevent.FamilyMemberId</MudListItem>
            <MudListItem><b>Start:</b> @familyevent.Start</MudListItem>
            <MudListItem><b>End:</b> @familyevent.End</MudListItem>
            <MudListItem><b>All Day:</b> @(familyevent.AllDay ? "Yes" : "No")</MudListItem>
            <MudListItem><b>Text:</b> @familyevent.Text</MudListItem>
        </MudList>

        <MudDivider Class="my-4" />

        <MudStack Direction="Row" Spacing="2">
            <MudButton Variant="Variant.Filled" Color="Color.Primary" Href="@($"/familyevents/edit?id={familyevent.Id}")">
                Edit
            </MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Secondary" Href="/familyevents">
                Back to List
            </MudButton>
        </MudStack>
    }
</MudPaper>

@code {
    private FamilyEvent? familyevent;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        familyevent = await context.FamilyEvents.FirstOrDefaultAsync(m => m.Id == Id);

        if (familyevent is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
