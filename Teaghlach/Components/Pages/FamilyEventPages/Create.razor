@page "/familyevents/create"
@using Microsoft.EntityFrameworkCore
@using Teaghlach.Models
@inject IDbContextFactory<Teaghlach.Data.TeaghlachContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h2>FamilyEvent</h2>
<hr />
<div class="row">
	<div class="col-md-4">
		<EditForm Model="FamilyEvent" OnValidSubmit="AddFamilyEvent">

			<DataAnnotationsValidator />
			<ValidationSummary class="text-danger" role="alert" />
			
			<div class="mb-3">
				<label for="location" class="form-label">Location:</label>
				<InputText id="location" @bind-Value="FamilyEvent.Location" class="form-control" />
				<ValidationMessage For="() => FamilyEvent.Location" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="description" class="form-label">Description:</label>
				<InputText id="description" @bind-Value="FamilyEvent.Description" class="form-control" />
				<ValidationMessage For="() => FamilyEvent.Description" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="category" class="form-label">Category:</label>
				<InputSelect id="category"
							 class="form-select"
							 Value="FamilyEvent.EventCategoryId"
							 ValueChanged="@(
                 EventCallback.Factory.Create<int?>(this, HandleCategoryChanged)
             )"
							 ValueExpression="() => FamilyEvent.EventCategoryId">
					<option value="">-- Select Category --</option>
					@foreach (var cat in EventCategories)
					{
						<option value="@cat.Id">@cat.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => FamilyEvent.EventCategoryId" class="text-danger" />
			</div>

			<div class="mb-3">
				<label for="subcategory" class="form-label">Subcategory:</label>
				<InputSelect id="subcategory" class="form-select" @bind-Value="FamilyEvent.EventSubCategoryId">
					<option value="">-- Select Subcategory --</option>
					@foreach (var sub in FilteredSubCategories)
					{
						<option value="@sub.Id">@sub.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => FamilyEvent.EventSubCategoryId" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="color" class="form-label">Color:</label>
				<input type="color" id="color" class="form-control form-control-color"
					   @bind="FamilyEvent.Color" disabled />
				<ValidationMessage For="() => FamilyEvent.Color" class="text-danger" />
			</div>

			<div class="mb-3">
				<label for="familymemberid" class="form-label">Family Member:</label>
				<InputSelect id="familymemberid" @bind-Value="FamilyEvent.FamilyMemberId" class="form-select">
					<option value="">-- Select Family Member --</option>
					@foreach (var member in FamilyMembers)
					{
						<option value="@member.Id">@member.Name</option>
					}
				</InputSelect>
				<ValidationMessage For="() => FamilyEvent.FamilyMemberId" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="start" class="form-label">Start:</label>
				<div class="d-flex">
					<InputDate id="start" @bind-Value="FamilyEvent.Start" class="form-control" />
					<input type="time" id="startTime" @bind="startTime" class="form-control ms-2" />
				</div>
				<ValidationMessage For="() => FamilyEvent.Start" class="text-danger" />
			</div>

			<div class="mb-3">
				<label for="end" class="form-label">End:</label>
				<div class="d-flex">
					<InputDate id="end" @bind-Value="FamilyEvent.End" class="form-control" />
					<input type="time" id="endTime" @bind="endTime" class="form-control ms-2" />
				</div>
				<ValidationMessage For="() => FamilyEvent.End" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="allday" class="form-label">AllDay:</label>
				<InputCheckbox id="allday" @bind-Value="FamilyEvent.AllDay" class="form-check-input" />
				<ValidationMessage For="() => FamilyEvent.AllDay" class="text-danger" />
			</div>
			<div class="mb-3">
				<label for="text" class="form-label">Text:</label>
				<InputText id="text" @bind-Value="FamilyEvent.Text" class="form-control" />
				<ValidationMessage For="() => FamilyEvent.Text" class="text-danger" />
			</div>
			<button type="submit" class="btn btn-primary">Create</button>
		</EditForm>
	</div>
</div>

<div>
	<a href="/calendar">Back to Calendar</a>
</div>

@code {
	// ------------------------------
	// Model & Form Initialization
	// ------------------------------

	[SupplyParameterFromForm]
	private FamilyEvent FamilyEvent { get; set; } = new()
		{
			Start = DateTime.Today,
			End = DateTime.Today
		};

	private TimeOnly? startTime = null;
	private TimeOnly? endTime = null;

	// ------------------------------`
	// Data Sources
	// ------------------------------

	private List<FamilyMember> FamilyMembers = new();
	private List<EventCategory> EventCategories = new();
	private List<EventSubCategory> AllSubCategories = new();
	private List<EventSubCategory> FilteredSubCategories = new();

	private readonly Dictionary<int, string> CategoryColors = new()
{
    // Match these IDs with the actual IDs in your EventCategory table
    { 1, "#FFB6C1" }, // Birthday
    { 2, "#ADD8E6" }, // Sports
    { 3, "#90EE90" }, // School
    { 4, "#FFD700" }, // Appointment
    { 5, "#FFA07A" }, // Chore
    { 6, "#20B2AA" }, // Holiday
    { 7, "#D3D3D3" }, // Other
};


	// ------------------------------
	// Lifecycle
	// ------------------------------

	protected override async Task OnInitializedAsync()
	{
		using var context = await DbFactory.CreateDbContextAsync();
		FamilyMembers = await context.FamilyMembers.ToListAsync();
		EventCategories = await context.EventCategories.ToListAsync();
		AllSubCategories = await context.EventSubCategories.ToListAsync();
	}

	// ------------------------------
	// Event Handlers
	// ------------------------------

	private void HandleCategoryChanged(int? selectedCategoryId)
	{
		FamilyEvent.EventCategoryId = selectedCategoryId;

		if (selectedCategoryId.HasValue)
		{
			// Set the default color for the selected category
			if (CategoryColors.TryGetValue(selectedCategoryId.Value, out var color))
			{
				FamilyEvent.Color = color;
			}

			FilteredSubCategories = AllSubCategories
				.Where(sc => sc.EventCategoryId == selectedCategoryId)
				.ToList();
		}
		else
		{
			FilteredSubCategories.Clear();
		}

		FamilyEvent.EventSubCategoryId = null;
	}

	// ------------------------------
	// Submit Form
	// ------------------------------


	private async Task AddFamilyEvent()
	{
		using var context = DbFactory.CreateDbContext();

		// Combine date and time for start
		FamilyEvent.Start = FamilyEvent.Start.Date + startTime.Value.ToTimeSpan();

		// Combine date and time for end
		if (FamilyEvent.End.HasValue)
		{
			FamilyEvent.End = FamilyEvent.End.Value.Date + endTime.Value.ToTimeSpan();
		}
		else
		{
			// If End is null, default to 1 hour after Start
			FamilyEvent.End = FamilyEvent.Start.AddHours(1);
		}

		// If End is before or equal to Start, fix it
		if (FamilyEvent.End <= FamilyEvent.Start)
		{
			FamilyEvent.End = FamilyEvent.Start.AddHours(1);
		}

		context.FamilyEvents.Add(FamilyEvent);
		await context.SaveChangesAsync();

		NavigationManager.NavigateTo("/calendar"); // Or "/calendar"
	}

}
